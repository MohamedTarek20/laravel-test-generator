<?php

use App\Http\Controllers\{{ Model }}Controller;
use App\Http\Requests\Update{{ Model }}Request;
use App\Http\Requests\Store{{ Model }}Request;
use App\Models\{{ Model }};
use Ahrmerd\TestGenerator\TestHelpers;
use App\Models\User;
use Laravel\Sanctum\Sanctum;



/**
 * NOTE: this are generated test based on your model and form request. You can modify the tests to suite your usecase
 * ensure your factories and form request are properly set
 */


//leave an empty string if you don't use api versioning
$apiVersion = "v1";


beforeEach(function () use ($apiVersion) {
    $user = User::factory()->create();

    //prepares the route by inserting the api version if it exists
    $this->apiUrl = "/api" . (empty($apiVersion) ? '' : "/$apiVersion") . "/{{plrModel}}";
    $this->user = Sanctum::actingAs($user);

});

it('can list all {{plrModel}}', function (){
    ${{plrModel}}_ids = {{ Model }}::factory()->count(5)->create()->pluck('id');
    ${{plrModel}} = {{ Model }}::query()->findMany(${{plrModel}}_ids);

    $apiResponse = $this->getJson($this->apiUrl);

    //checks api response
    expect($apiResponse->assertStatus(200)->json()['data'])->toMatchArray(${{plrModel}}->toArray());


});


it('can create a {{ lcModel }}', function () {

    //ensures all {{ lcModel }} are deleted
    {{ Model }}::query()->delete();
    $data = {{ Model }}::factory()->raw();

    //creates a {{lcModel}}} using the api
    $apiResponse = $this->postJson($this->apiUrl, $data);

    //api assertions
    $this->assertDatabaseHas('{{plrModel}}', $data);
    $apiResponse->assertStatus(201);
    expect($apiResponse->json()['data'])->toHaveKeys(array_keys($data));


});


it('can show a {{ lcModel }}', function () {
    ${{ lcModel }} = {{ Model }}::factory()->create();


    $apiResponse = $this->getJson($this->apiUrl . '/' . ${{ lcModel }}->id);

    //asserts api response
    expect($apiResponse->assertStatus(200)->json()['data'])->toMatchArray(${{ lcModel }}->toArray());




});

it('can update a {{ lcModel }}', function () {
    $api{{ Model }} = {{ lcModel }}::factory()->create();

    $newApidata = {{ Model }}::factory()->raw();


    //asserts the updated data is not yet in the table
    $this->assertDatabaseMissing('{{plrModel}}', $newApidata);


    $apiResponse = $this->putJson($this->apiUrl . '/' . $api{{ Model }}->id, $newApidata);


    //asserts the updated data is now in the table
    $this->assertDatabaseHas('{{plrModel}}', $newApidata);

    expect($apiResponse->json()['data'])->toMatchArray($api{{ Model }}->refresh()->toArray());
});

it('can delete a {{ lcModel }}', function () {
    $api{{ Model }} = {{ lcModel }}::factory()->create();

    $this->assertModelExists($api{{ Model }});

    $apiResponse = $this->deleteJson($this->apiUrl . '/' . $api{{ Model }}->id);

    //remove the next line if your models uses soft deletes
    $this->assertModelMissing($api{{ Model }});


    //uncomment the next line if you model uses soft deletes
    //$this->assertSoftDeleted($api{{ Model }});




});


it('validates that Store{{ Model }} request is used in storing a {{ lcModel }}', function () {
    $request = new Store{{ Model }}Request();

    $rules = $request->rules();
    TestHelpers::assertActionUsesFormRequest(
        {{ Model }}Controller::class,
        'store',
        Store{{ Model }}Request::class
    );
    $this->assertEquals(
        [
            {{ storeRules }}
        ],
        $rules
    );
});

it('validates that Update{{ Model }} request is used in updating a {{ lcModel }}', function () {
    $request = new Update{{ Model }}Request();

    $rules = $request->rules();
    TestHelpers::assertActionUsesFormRequest(
        {{ Model }}Controller::class,
        'update',
        Update{{ Model }}Request::class
    );
    $this->assertEquals(
        [
            {{ updateRules }}
        ],
        $rules
    );
});



